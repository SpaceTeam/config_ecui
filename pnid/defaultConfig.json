{
    "externalSourceDefault": "http://192.168.0.7:3000/d-solo/i6z2viISk/teststand-streaming?orgId=1&panelId=",
    "wire": {
        "eval": "if (inVars['value'] > thresholds['wire']['pressurized']) { outVars['color']='content' } else if (inVars['value'] > thresholds['wire']['notconnected']) { outVars['color']='' } else { outVars['color']='notconnected' }"
    },
    "PnID-Lib-heater": {
		"eval": "if (inVars['value'] > thresholds['heater']['on']) { outVars['color']='on' } else { outVars['color']='off' }",
		"sens_deviation": "return false;",
		"popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
	},
    "PnID-Lib-Valve_Solenoid_NO": {
        "eval": "if (inVars['value'] >= thresholds['solenoid']['high']) { outVars['color']='closed'; outVars['value']='Closed' } else { outVars['color']='open'; outVars['value']='Open' }",
        "sens_deviation": "if ((setState == 0 && feedback >= thresholds['solenoid']['high']) || (setState == 1 && feedback < thresholds['solenoid']['high'])) { return true; } return false;",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "PnID-Lib-Valve_Solenoid_NC": {
        "eval": "if (inVars['value'] >= thresholds['solenoid']['high']) { outVars['color']='open'; outVars['value']='Open' } else { outVars['color']='closed'; outVars['value']='Closed' }",
        "sens_deviation": "if ((setState == 0 && feedback >= thresholds['solenoid']['high']) || (setState == 1 && feedback < thresholds['solenoid']['high'])) { return true; } return false;",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "PnID-Lib-Motor": {
        "eval": "if (inVars['value'] >= thresholds['solenoid']['high']) { outVars['color']='open'; outVars['value']='Open' } else { outVars['color']='closed'; outVars['value']='Closed' }",
        "sens_deviation": "if ((setState == 0 && feedback >= thresholds['solenoid']['high']) || (setState == 1 && feedback < thresholds['solenoid']['high'])) { return true; } return false;",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "PnID-Lib-Camera": {
        "eval": "if (inVars['value'] > thresholds['igniter']['active']) { outVars['color']='on' } else { outVars['color']='off' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "PnID-Lib-Label": {
        "eval": "if (inVars['value'] > 0) { outVars['color']='on'; } else { outVars['color']='off'; } outVars['value']=inVars['this'].replace('-',' ');",
        "popup": [
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "PnID-Lib-Switch": {
        "eval": "if (inVars['value'] >= thresholds['switch']['high']) { outVars['color']='open'; outVars['value']='Powered' } else { outVars['color']='closed'; outVars['value']='Unpowered' }",
        "sens_deviation": "if ((setState == 0 && feedback >= thresholds['switch']['high']) || (setState == 1 && feedback < thresholds['switch']['high'])) { return true; } return false;",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "PnID-Lib-Valve_Pneumatic": {
        "eval": "if (inVars['value'] > thresholds['servo_valve']['high']) { outVars['color']='open'; outVars['value']='Open ('+Math.round(inVars['value'])+')' } else if (inVars['value'] > thresholds['servo_valve']['low']) { outVars['color']='throttle'; outVars['value']='Thr. ('+Math.round(inVars['value'])+')' } else { outVars['color']='closed'; outVars['value']='Closed  ('+Math.round(inVars['value'])+')' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "slider",
                "min": 0,
                "max": 65535,
                "step": 1
            }
        ]
    },
    "PnID-Lib-Valve_Servo": {
        "eval": "if (inVars['value'] > thresholds['servo_valve']['high']) { outVars['color']='open'; outVars['value']='Open ('+inVars['value'].toFixed(2)+')' } else if (inVars['value'] > thresholds['servo_valve']['low']) { outVars['color']='throttle'; outVars['value']='Thr. ('+inVars['value'].toFixed(2)+')' } else { outVars['color']='closed'; outVars['value']='Closed ('+inVars['value'].toFixed(2)+')' }",
        "sens_deviation": "if ((feedback >= (setState + (100))) || (feedback <= (setState - (100)))) { return true; } return false;",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "slider",
                "min": 0,
                "max": 100,
                "step": 0.01
            }
        ]
    },
    "PnID-Lib-Valve_Servo_3Way": {
        "eval": "if (inVars['value'] >= thresholds['3wayValve']['high']) { outVars['color']='position_a'; outVars['value']='Hot' } else { outVars['color']='position_b'; outVars['value']='Cold' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            }
        ]
    },
    "PnID-Lib-HeatExchanger": {
        "eval": "if (inVars['value'] >= thresholds['pump']['high']) { outVars['color'] = 'content' } else { outVars['color'] = 'empty' }"
    },
    "PnID-Lib-Valve_Needle_Servo": {
        "eval": "if (inVars['value'] > 80) { outVars['color']='open'; outVars['value']='Open ('+Math.round(inVars['value'])+')' } else if (inVars['value'] > 20) { outVars['color']='throttle'; outVars['value']='Thr. ('+Math.round(inVars['value'])+')' } else { outVars['color']='closed'; outVars['value']='Closed  ('+Math.round(inVars['value'])+')' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "slider",
                "min": 0.0,
                "max": 100.0,
                "step": 1
            }
        ]
    },
    "PnID-Lib-Sensor_Pressure": {
        "eval": "if (inVars['value'] > 2) { outVars['color']='content' } else if (inVars['value'] > -8) { outVars['color']='low' } else { outVars['color']='notconnected'; outVars['value']='NC' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "display",
                "style": "external",
                "source": null,
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-Sensor_Pressure_Big": {
        "eval": "if (inVars['value'] > thresholds['wire']['pressurized']) { outVars['color']='content' } else if (inVars['value'] > thresholds['wire']['notconnected']) { outVars['color']='low' } else { outVars['color']='notconnected'; outVars['value']='NC' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "display",
                "style": "external",
                "source": null,
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-Sensor_Height": {
        "eval": "if (inVars['value'] > thresholds['wire']['pressurized']) { outVars['color']='content' } else if (inVars['value'] > thresholds['wire']['notconnected']) { outVars['color']='low' } else { outVars['color']='notconnected'; outVars['value']='NC' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "display",
                "style": "external",
                "source": null,
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-IMU": {
        "eval": "if (inVars['value'] > thresholds['wire']['pressurized']) { outVars['color']='content' } else if (inVars['value'] > thresholds['wire']['notconnected']) { outVars['color']='low' } else { outVars['color']='notconnected'; outVars['value']='NC' }",
        "popup": [
            {
                "type": "display",
                "style": "external",
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-GNSS": {
        "eval": "if (inVars['value'] > thresholds['wire']['pressurized']) { outVars['color']='content' } else if (inVars['value'] > thresholds['wire']['notconnected']) { outVars['color']='low' } else { outVars['color']='notconnected'; outVars['value']='NC' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "display",
                "style": "text",
                "variable": "lora-gps_latitude-sensor",
                "label": "Latitude"
            },
            {
                "type": "display",
                "style": "text",
                "variable": "lora-gps_longitude-sensor",
                "label": "Longitude"
            },
            {
                "type": "display",
                "style": "external",
                "source": "http://localhost:3000/d-solo/yJ9UYDqnk/guidance-and-navigation?orgId=1&panelId=2",
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-Battery": {
        "eval": "if (inVars['value'] > thresholds['battery']['high']) { outVars['color']='battery_high' } else if (inVars['value'] > thresholds['battery']['low']) { outVars['color']='battery_nominal' } else if (inVars['value'] > thresholds['battery']['critical']) { outVars['color']='battery_low' } else if (inVars['value'] > thresholds['battery']['notconnected']) { outVars['color']='battery_critical' } else { outVars['color']='notconnected'; outVars['value']='NC' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "display",
                "style": "external",
                "source": null,
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-Sensor_Temperature": {
        "eval": "if (inVars['value'] > thresholds['tempSens']['notconnected']) { outVars['color']='notconnected'; outVars['content']='notconnected'; outVars['value']='NC'} else if (inVars['value'] > 30) { outVars['color']='high' } else if (inVars['value'] > -200) { outVars['color']='low' } else { outVars['color']='notconnected'; outVars['value']='NC' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "display",
                "style": "external",
                "source": null,
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-Sensor_Load": {
        "eval": "",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "button",
                "variable": "thrust:Tare",
                "label": "Tare"
            },
            {
                "type": "display",
                "style": "external",
                "source": null,
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-Water_Tank": {
        "eval": "if (inVars['value'] > 30) { outVars['color']='high'; outVars['content']='high' } else if (inVars['value'] > -200) { outVars['color']='low'; outVars['content']='low' } else { outVars['color']='notconnected'; outVars['value']='NC'; outVars['content']='' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "display",
                "style": "external",
                "source": null,
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-Sensor_MassFlow": {
        "eval": "",
        "popup": [
            {
                "type": "display",
                "style": "text"
            }
        ]
    },
    "PnID-Lib-Tank": {
        "eval": "",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "textEntry",
                "variable": "tank_fill_low"
            },
            {
                "type": "input",
                "style": "textEntry",
                "variable": "tank_fill_high"
            }
        ]
    },
    "PnID-Lib-LED": {
        "eval": "if (inVars['value'] > 0) { outVars['color']='on'; } else { outVars['color']='off'; }"
    },
    "PnID-Lib-Flowchart_State": {
        "eval": "if (inVars['value'] > 0) { outVars['color']='on'; } else { outVars['color']='off'; } outVars['value']=inVars['this'].replace('rocket-','').replace(/([A-Z])/g, ' $1').replace(/([A-Z])/g, ' $1').replace('  Abort  Flow  Chart', 'Abort');"
    },
    "PnID-Lib-Engine_TorchIgniter": {
        "eval": "",
        "popup": [
            {
                "type": "display",
                "style": "external",
                "source": null,
                "autoID": false,
                "width": 450,
                "height": 200
            }
        ]
    },
    "PnID-Lib-igniter": {
        "eval": "if (inVars['value'] > thresholds['igniter']['active']) { outVars['color']='on' } else { outVars['color']='off' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "PnID-Lib-PowerSource": {
        "eval": "if (inVars['value'] > thresholds['voltage']['high'] || inVars['value'] < thresholds['voltage']['low']) { outVars['color']='outside_range' } else { outVars['color']='nominal'; }"
    },
    "PnID-Lib-QuickConnect": {
        "eval": "if (inVars['value'] > 2) { outVars['color']='content' } else { outVars['color']='empty' }"
    },
    "PnID-Lib-CheckValve": {
        "eval": "if (inVars['value'] > 2) { outVars['color']='content' } else { outVars['color']='empty' }"
    },
    "PnID-Lib-Pump": {
        "eval": "if (inVars['value'] >= thresholds['pump']['high']) { outVars['color']='on'; outVars['value']='On'; } else { outVars['color']='off'; outVars['value']='Off'; }",
        "sens_deviation": null,
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "PnID-Lib-Rocket_Channel": {
        "eval": "switch (inVars['value']) { case 0: outVars['value']='PAD_IDLE'; break; case 1: outVars['value']='AUTO_CHECK'; break; case 2: outVars['value']='IGNITION_SEQUENCE'; break; case 3: outVars['value']='HOLD_DOWN'; break; case 4: outVars['value']='POWERED_ASCENT'; break; case 5: outVars['value']='UNPOWERED_ASCENT'; break; case 6: outVars['value']='DEPRESS'; break; case 7: outVars['value']='ABORT'; break; }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "buttonDanger",
                "variable": "rocket-Abort",
                "label": "ABORT",
                "action": "abortSequence('abort from user', 1000)"
            },
            {
                "type": "display",
                "style": "separator"
            },
            {
                "type": "input",
                "style": "button",
                "variable": "rocket-ReleaseHolddown",
                "label": "Release Holddown"
            },
            {
                "type": "display",
                "style": "separator"
            },
            {
                "type": "input",
                "style": "button",
                "variable": "rocket-AutoCheck",
                "label": "Auto Check"
            },
            {
                "type": "input",
                "style": "buttonDanger",
                "variable": "rocket-InternalControl",
                "collapsible": true,
                "collapsibleLabel": "Internal Control",
                "label": "Internal Control",
                "action": "startTimer(-10, null)"
            },
            {
                "type": "input",
                "style": "button",
                "variable": "rocket-EndOfFlight",
                "label": "End of Flight",
                "action": "timerStop(timeMillis/1000)"
            },
            {
                "type": "input",
                "style": "numberEntry",
                "min": "0",
                "max": "10000",
                "label": "Holddown Timeout",
                "suffix": "ms",
                "variable": "rocket-HolddownTimeout",
                "poll_var": "rocket-GetHolddownTimeout",
                "set_var": "rocket-SetHolddownTimeout"
            },
            {
                "type": "input",
                "style": "numberEntry",
                "min": "-2",
                "max": "100",
                "label": "Min. Chamber Pressure",
                "suffix": "bar",
                "variable": "rocket-MinimumChamberPressure",
                "poll_var": "rocket-GetMinimumChamberPressure",
                "set_var": "rocket-SetMinimumChamberPressure"
            },
            {
                "type": "input",
                "style": "numberEntry",
                "min": "-2",
                "max": "100",
                "label": "Min. Fuel Pressure",
                "suffix": "bar",
                "variable": "rocket-MinimumFuelPressure",
                "poll_var": "rocket-GetMinimumFuelPressure",
                "set_var": "rocket-SetMinimumFuelPressure"
            },
            {
                "type": "input",
                "style": "numberEntry",
                "min": "-2",
                "max": "100",
                "label": "Min. Ox Pressure",
                "suffix": "bar",
                "variable": "rocket-MinimumOxPressure",
                "poll_var": "rocket-GetMinimumOxPressure",
                "set_var": "rocket-SetMinimumOxPressure"
            },
            {
                "type": "input",
                "style": "button",
                "collapsible": true,
                "collapsibleLabel": "Reset Settings",
                "variable": "rocket-RequestResetSettings",
                "label": "Request Reset Settings"
            },
            {
                "type": "input",
                "style": "button",
                "collapsible": true,
                "collapsibleLabel": "Reset State Machine",
                "variable": "rocket-ResetStateMachine",
                "label": "Reset State Machine"
            }
        ]
    },
    "gui-water_pumps": {
        "eval": "if (inVars['value'] > 0) { outVars['color']='on'; outVars['value']='On'; } else { outVars['color']='off'; outVars['value']='Off'; }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "gui-fuel_press_depress": {
        "eval": "if (inVars['value'] > 0) { outVars['value']='Open' } else { outVars['value']='Closed' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "gui-ox_press_depress": {
        "eval": "if (inVars['value'] > 0) { outVars['value']='Open' } else { outVars['value']='Closed' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "gui-water_valves": {
        "eval": "if (inVars['value'] > 0) { outVars['value']='Hot' } else { outVars['value']='Cold' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            }
        ]
    },
    "gui-pressure_control-SetEnabled": {
        "eval": "if (inVars['value'] > 0) { outVars['value']='Pressure Controlled' } else { outVars['value']='Manual' }",
        "popup": [
            {
                "type": "display",
                "style": "text"
            },
            {
                "type": "input",
                "style": "checkbox"
            },
            {
                "type": "input",
                "style": "numberEntry",
                "min": "0",
                "max": "100",
                "label": "Set Point",
                "suffix": "bar",
                "variable": "pressure_control-Target",
                "poll_var": "pressure_control-GetTarget",
                "set_var": "pressure_control-SetTarget"
            },
            {
                "type": "input",
                "style": "numberEntry",
                "min": "0",
                "max": "100",
                "label": "Hysteresis",
                "suffix": "bar",
                "variable": "pressure_control-Hysteresis",
                "poll_var": "pressure_control-GetHysteresis",
                "set_var": "pressure_control-SetHysteresis"
            }
        ]
    }
}
